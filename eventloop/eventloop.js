// Однопоточность JS - язык выполняется в одном потоке, все операции проходят поочередно
// Однако асинхронные операции позволяют избегать блокировки основного потока

// Callstack(Стек вызовов)
// Здесб хранятся все одновременно выполняющиеся функции. Вызов функции помещается в стек, а после ее выполнения удаляется 

// Heap - область памяти, выделенная для хранения объектов. Место где располагаются данные, необходимые для выполнения программы

// Web API - представляемые браузером интерфейсы (напрмер, setTimeout, DOM, AJAX) позволяющие выполнять асинхронные задачи.
// Они позволяют запускать операции, не тормозя основной поток, и после завершения отправляют задачу в очередь

// Macro Task Queue (Очередб макротасок)
// В эту очередь помещаются задачи такие как callback из setTimeout, события пользовательского ввода

// Micro Task Queue (Очередб микротасок)
// Сюда попадают задачи связанные с промисами. Микротаски имеют приоритет над макротасками. После завершения синхронного кода и до выаолнения 
// очередной макротаски движок обрабатывает все микротаски

// EventLoop (Цикл событий)
// Механизм который следит за тем чтобы call stack был пуст
// затем сначала обрабатывает все микротаски, а потом берет задачу из очеред маротасок,
// это обеспечивает чередование синхронных и асинхронных операций

// К микротаскам относятся
// Promise.then
// Promise.catch
// Promise.finally
// Сallback-и, поставленные с помощью queueMicrotask (queueMicrotask — это функция, позволяющая добавить задачу (callback) в очередь микротасок.)

// К макротаскам относятся
// Функции, поставленные через setTimeout и setInterval.
// Callback-и событий, например, обработчики кликов, ввода с клавиатуры, мыши.
// Некоторые API браузера, такие как requestAnimationFrame.

console.log(1);

setTimeout(() => {
   console.log(2);
}, 0);

const myPromise = new Promise((resolve, reject) => {
   console.log(3);
   resolve(4);
   }).then((value) => console.log(value));

console.log(5);
//1 3 5 4 2

// Сначала Event Loop проверяет выполнились ли все синхронные задачи

// Потом выполняются все задачи из микротасков

// После выполнения всех микротасков - очередь очищается

// Затем мы берем одну макрозадачу из списка и выполняем ее

// После выполнения мы смотрим нужно ли нам сделать перерисовку страницы

// Если перерисовать страницу нужно - делаем это

// Все снова начинается с первого пункта :)

console.log("Step 1: In global scope")

setTimeout(() => console.log("Step 2: In setTimeout"));

new Promise((resolve) => {
  console.log('Step 3: In promise constructor');
}).then(() => console.log('Step 4: In then'));

setTimeout(() => console.log("Step 5: In another setTimeout"))

// Step 1: In global scope
// Step 3: In promise constructor
// Step 4: In then
// Step 2: In setTimeout
// Step 5: In another setTimeout