// Прототип - объект, от которого другие объекты наследуют свойства и методы
// [[Prototype]] - скрытое свойство, которое указывает на прототип объекта
// __proto__ - свойство, которое указывает на прототип объекта
// Object.getPrototypeOf(obj) - метод, который возвращает прототип объекта
// Object.setPrototypeOf(obj, prototype) - метод, который устанавливает прототип объекта
// Object.create(obj) - метод, который создает новый объект с указанным прототипом
// Object.prototype - прототип объекта, который является родителем для всех других объектов
// Object.prototype.__proto__ - прототип объекта, который является родителем для всех других объектов

// Own Property (собственное свойство) - свойство, которое принадлежит непосредственно объекту, а не наследуется от прототипа
// Inherit Property (наследуемое свойство) - свойство, которое объект получает от своего прототипа через механизм наследования

// При обращении к свойству сначала ищет его в самом объекте, если нет, то ищет в прототипе
// Если свойство не найдено в прототипе, то возвращается undefined
// Object.hasOwn(obj, property) - метод, который проверяет, принадлежит ли свойство объекту или его прототипу
// Object.keys(obj) - метод, который возвращает массив собственных свойств объекта
// Object.values(obj) - метод, который возвращает массив значений собственных свойств объекта
// Object.entries(obj) - метод, который возвращает массив собственных свойств объекта в виде [key, value]

// Прототипное наследование - механизм, при котором объекты наследуют свойства и методы от других объектов через специальное внутреннее свойство [[Prototype]]
// Когда мы обращаемся к свойству объекта, которого в нем нет, то поиск продолжается в прототипе

// this всегда указывает на объект, который вызвал метод (объект перед точкой), а не на проотип, где метод определен.

// [[Prototype]] - это внутреннее свойство объекта по спецификации, а __proto__ - это геттер/сеттер для доступа к этому свойству.
// __proto__ считается устаревшим, современный код должен использовать Object.getPrototypeOf() и Object.setPrototypeOf()

// 1. Работа с прототипами
// В приведённом ниже коде создаются и изменяются два объекта.
// Какие значения показываются в процессе выполнения кода?

let animal = {
  jumps: null
};

let rabbit = {
  __proto__: animal,
  jumps: true
};

alert( rabbit.jumps ); // ? (1) true

delete rabbit.jumps;

alert( rabbit.jumps ); // ? (2) null

delete animal.jumps;

alert( rabbit.jumps ); // ? (3) underfined



// 2. Алгоритм поиска
// Задача состоит из двух частей.
// У нас есть объекты:

let head = {
  glasses: 1
};

let table = {
  pen: 3,
  __proto__: head
};

let bed = {
  sheet: 1,
  pillow: 2,
  __proto__: table
};

let pockets = {
  money: 2000,
  __proto__: bed
};
// С помощью свойства __proto__ задайте прототипы так, чтобы поиск любого свойства выполнялся по следующему пути: pockets → bed → table → head.
//  Например, pockets.pen должно возвращать значение 3 (найденное в table), а bed.glasses – значение 1 (найденное в head).
// Ответьте на вопрос: как быстрее получить значение glasses – через pockets.glasses или через head.glasses? При необходимости составьте цепочки поиска и сравните их.
// Через head.glasses - одно действие

// 3. Куда будет произведена запись?
// Объект rabbit наследует от объекта animal.
// Какой объект получит свойство full при вызове rabbit.eat(): animal или rabbit?

let animal = {
  eat() {
    this.full = true;
  }
};

let rabbit = {
  __proto__: animal
};

rabbit.eat(); 
// rabbit получит свойство full, так как this указывает на rabbit


// 4. Почему наедаются оба хомяка?
// У нас есть два хомяка: шустрый (speedy) и ленивый (lazy); оба наследуют от общего объекта hamster.
// Когда мы кормим одного хомяка, второй тоже наедается. Почему? Как это исправить?

let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster,
  stomach: []
};

let lazy = {
  __proto__: hamster,
  stomach: []
};

// Этот хомяк нашёл еду
speedy.eat("apple");
alert( speedy.stomach ); // apple

// У этого хомяка тоже есть еда. Почему? Исправьте
alert( lazy.stomach ); // apple

// Потому что оба хомяка используют один и тот же прототип hamster и сохраняют еду в одном и том же массиве stomach.
// Чтобы исправить это, нужно каждому хомяку создать свой массив stomach.

