// *   **Методы объекта**:
//     *   Функция, которая является свойством объекта, называется его методом
//     *   Методы позволяют объектам «совершать действия»
//     *   Пример добавления метода:
//         let user = { name: "John" };
//         user.sayHi = function() {
//           alert("Привет!");
//         };
//         user.sayHi(); // Привет!
//         ```
//
// *   **Сокращённый синтаксис**:
//     *   В литерале объекта можно использовать более короткий синтаксис для объявления метода
//         user = {
//           sayHi() { // то же самое, что и "sayHi: function(){...}"
//             alert("Привет");
//           }
//         };
//         ```
//
// *   **Ключевое слово `this`**:
//     *   Для доступа к информации внутри объекта, метод может использовать ключевое слово `this`
//     *   Значение `this` — это сам объект, в контексте которого был вызван метод
//     *   Пример использования `this`:
//         let user = {
//           name: "John",
//           age: 30,
//           sayHi() {
//             // "this" - это текущий объект.
//             alert(this.name);
//           }
//         };
//         user.sayHi(); // John
//         ```

function makeUser() {
  return {
    name: "John",
    ref: this
  };
}

let user = makeUser();

console.log( user.ref.name );

// Код вернёт ошибку TypeError, так как в строгом режиме `this` внутри `makeUser` будет `undefined`, и нельзя получить свойство `name` у `undefined`. - при использовании strict mode 
// Код вернёт пустую строку, так как `this` внутри `makeUser` ссылается на глобальный объект `window`, а `window.name` по умолчанию является пустой строкой. - при нестрогом режиме